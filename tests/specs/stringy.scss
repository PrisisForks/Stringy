@charset "UTF-8";

//      A Sass string manipulation library
//
//                http://growcss.de
//
//         Authors: Daniel Bannert (@anolilab)
//
//      This project is licensed under the terms of the MIT license
// - - - - - - - - - - - - - - - - - - - - - - - - -

// Helper function for str-to-num fn.
// Source: http://sassmeister.com/gist/9647408
//
// @param {number} $number - Number
// @param {string} $unit
//
// @return {number|false}
//
// @example scss - Usage
//   .element {
//     widht: convert-units(2, "px");
//   }
//
//   .element {
//     widht: convert-units(100, "rem");
//   }
//
// @example css - CSS Output
//   .element {
//      widht: 2px;
//   }
//
//   .element {
//      widht: 100rem;
//   }
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function convert-units($number, $unit) {
  $strings: "px", "cm", "mm", "%", "ch", "pica", "in", "em", "rem", "pt", "pc", "ex", "vw", "vh", "vmin", "vmax", "deg", "rad", "grad", "turn";
  $units:   1px, 1cm, 1mm, 1%, 1ch, 1pica, 1in, 1em, 1rem, 1pt, 1pc, 1ex, 1vw, 1vh, 1vmin, 1vmax, 1deg, 1rad, 1grad, 1turn;
  $index: index($strings, $unit);

  @if not $index {
    @warn "Unknown unit `#{$unit}`.";
    @return false;
  }

  @if type-of($number) != "number" {
    @warn "`#{$number} is not a number`";
    @return false;
  }

  @return $number * nth($units, $index);
}

// Find first char which is not a space
//
// @param {string} $string - String
// @param {string} $direction ["left"] - Either `left` or `right`
//
// @return {number}
//
// @example scss - Usage
//   .element-first {
//     content: first-index("Find first char", "left");
//   }
//
//   .element-last {
//     content: first-index("Find first char", "right");
//   }
//
// @example css - CSS Output
//   .element-first {
//      content: "1";
//   }
//
//   .element-last {
//      content: "-1";
//   }
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function first-index($string, $direction: "left") {
  @for $i from 1 through str-length($string) {
    $index: if($direction == "left", $i, -$i);

    @if str-slice($string, $index, $index) != " " {
      @return $index;
    }
  }

  @return 0;
}

// Trim `$string`
//
// @param {string} $string - String to trim
//
// @return {string}
//
// @example scss - Usage
//   .element {
//     content: trim("        ");
//     content: trim("no spaces");
//     content: trim("   3 spaces in front");
//     content: trim("   3 spaces in front and back   ");
//     content: trim("          lots and lots of spaces");
//   }
//
// @example css - CSS Output
//   .element {
//     content: "";
//     content: "no spaces";
//     content: "3 spaces in front";
//     content: "3 spaces in front and back";
//     content: "lots and lots of spaces";
//   }
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function trim($string) {
  @return str-slice(
    $string,
    first-index($string, "left"),
    first-index($string, "right")
  );
}

// Returns a camelCase version of the string.
// Trims surrounding spaces, capitalizes letters following digits, spaces, dashes and underscores, and removes spaces, dashes, as well as underscores.
//
// @param {string} $string
//
// @return {string}
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function camelize($string) {
  // @if type-of($string) != "string" {
  //   @error "`camelize` function expecting a string for $string; #{type-of($string)} given.";
  // }

  $progress: $string;
  $result: "";
  $exclude: " ", "-", "–", "—", "_", ",", ";", ":", ".";

  @while str-length($progress) > 0  {
    $char: str-slice($progress, 1, 1);

    @if contain($exclude, $char) {
      $progress: capitalize(str-slice($progress, 2, 2)) + str-slice($progress, 3);
    } @else {
      $result: $result + $char;
      $progress: str-slice($progress, 2);
    }
  }

  @return $result;
}

// Uncapitalize string
//
// @param {string} $string
//
// @return {string}
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function str-lcfirst($string) {
  @if type-of($string) != "string" {
    @error "`str-lcfirst` function expecting a string for $string; #{type-of($string)} given.";
  }
  @return to-lower-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

// String replace
//
// @example scss - Usage
//   str-replace("beforeDURINGafter", "DURING", "REPLACED");
//
// @example - Output
//   beforeafter
//
// @param {string} $string - Initial string
// @param {string} $search - Substring to replace
// @param {string} $replace ("") - New value
//
// @return {string} - Updated string
//
// @author Hugo Giraudel https://gist.github.com/HugoGiraudel/1b4f2da5527830088e4d
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function str-replace($string, $search, $replacement, $fail-silently: false) {
  @if type-of($string) != "string" {
    @error "`str-replace` function expecting a string for $string; #{type-of($string)} given.";
  }

  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replacement + str-replace(str-slice($string, $index + str-length($search)), $search, $replacement);
  }

  @if $fail-silently {
    @return $string;
  } @else {
    @error "#{$search} was not found in #{$string}";
  }
}

@function str-split($string, $var, $location: "first") {
  @if type-of($string) != "string" {
    @error "`str-split` function expecting a string for $string; #{type-of($string)} given.";
  }

  $length: str-length($string);
  $index:  str-index($string, $var);

  $first:  str-slice($string, 0, $index - 1);
  $second: str-slice($string, $index + 2, $length);

  @if $location == "first" {
    @return $first;
  } @else {
    @return $second;
  }
}

// $selectorItems: str-to-list(#{&});
// @each $selectorItem in $selectorItems {
//     @debug $selectorItem;
// }
@function str-to-list($string, $separator: " ", $start-at: 1) {
  @if type-of($string) != "string" {
    @error "`str-to-list` function expecting a string for $string; #{type-of($string)} given.";
  }

  $work-str: str-slice($string, $start-at);
  $list: ();
  $index-of-first-space: str-index($work-str, $separator);

  @if $index-of-first-space == null {
    $list: ($work-str);
  } @else {
    $list: (str-slice($work-str, 1, $index-of-first-space - 1));
    $list: join($list, str-to-list($work-str, $start-at: $index-of-first-space + 1));
  }

  @return $list;
}

@function str-to-map($string, $map:()) {
  @if type-of($string) != "string" {
    @error "`str-to-map` function expecting a string for $string; #{type-of($string)} given.";
  }

  @if $string {
    $comma:   str-index($string, ",");
    $colon:   str-index($string, ":");
    $item:    if($comma, str-slice($string, 0, $comma - 1), $string);
    $string:  if($comma, str-slice($string, $comma +1), null);
    $key:     str-slice($item, 0, $colon - 1);
    $val:     str-slice($item, $colon +1);
    $map:     map-merge($map, ($key: $val));

    @return str-to-map($string, $map);
  }

  @return $map;
}
// https://gist.github.com/jakob-e/f3accce1f6277fea1d89

// Helper function for linear/radial-gradient-parsers.
// Source: http://sassmeister.com/gist/9647408
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function str-to-num($string) {
  @if type-of($string) != "string" {
    @error "`str-to-num` function expecting a string for $string; #{type-of($string)} given.";
  }

  // Matrices
  $strings: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $numbers:  0   1   2   3   4   5   6   7   8   9;

  // Result
  $result: 0;
  $divider: 0;
  $minus: false;

  // Looping through all characters
  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);
    $index: index($strings, $character);

    @if $character == "-" {
      $minus: true;
    } @else if $character == "." {
      $divider: 1;
    } @else {
      @if not $index {
        $result: if($minus, $result * -1, $result);

        @return convert-units($result, str-slice($string, $i));
      }

      $number: nth($numbers, $index);

      @if $divider == 0 {
        $result: $result * 10;
      } @else {
        // Move the decimal dot to the left
        $divider: $divider * 10;
        $number: $number / $divider;
      }

      $result: $result + $number;
    }
  }

  @return if($minus, $result * -1, $result);
}

// Capitalize string
//
// @param {string} $string
//
// @return {string}
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function str-ucfirst($string) {
  @if type-of($string) != "string" {
    @error "`str-ucfirst` function expecting a string for $string; #{type-of($string)} given.";
  }

  @return to-upper-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

// Capitalize each word in string
//
// @param {string} $string
//
// @return {string}
// - - - - - - - - - - - - - - - - - - - - - - - - -
@function str-ucwords($string) {
  @if type-of($string) != "string" {
    @error "`str-ucwords` function expecting a string for $string; #{type-of($string)} given.";
  }

  $progress: $string;
  $result: "";

  $running: true;

  @while $running {
    $index: str-index($progress, " ");

    @if $index {
      $result: $result + str-ucfirst(str-slice($progress, 1, $index));
      $progress: str-slice($progress, ($index + 1));
    } @else {
      $running: false;
    }
  }

  @return str-ucfirst($result) + str-ucfirst($progress);
}
